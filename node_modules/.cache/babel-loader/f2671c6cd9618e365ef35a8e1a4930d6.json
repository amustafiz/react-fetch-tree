{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parse;\nvar reName = /^[^\\\\]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi; // Modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\n\nvar reAttr = /^\\s*((?:\\\\.|[\\w\\u00b0-\\uFFFF-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])((?:[^\\\\]|\\\\[^])*?)\\3|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF-])*)|)|)\\s*(i)?\\]/;\nvar actionTypes = {\n  undefined: \"exists\",\n  \"\": \"equals\",\n  \"~\": \"element\",\n  \"^\": \"start\",\n  $: \"end\",\n  \"*\": \"any\",\n  \"!\": \"not\",\n  \"|\": \"hyphen\"\n};\nvar Traversals = {\n  \">\": \"child\",\n  \"<\": \"parent\",\n  \"~\": \"sibling\",\n  \"+\": \"adjacent\"\n};\nvar attribSelectors = {\n  \"#\": [\"id\", \"equals\"],\n  \".\": [\"class\", \"element\"]\n}; // Pseudos, whose data property is parsed as well.\n\nvar unpackPseudos = new Set([\"has\", \"not\", \"matches\", \"is\", \"host\", \"host-context\"]);\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\nvar quotes = new Set(['\"', \"'\"]); // Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\n\nfunction funescape(_, escaped, escapedWhitespace) {\n  var high = parseInt(escaped, 16) - 0x10000; // NaN means non-codepoint\n\n  return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n  String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n  String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\n\nfunction unescapeCSS(str) {\n  return str.replace(reEscape, funescape);\n}\n\nfunction isWhitespace(c) {\n  return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n\nfunction parse(selector, options) {\n  var subselects = [];\n  selector = parseSelector(subselects, \"\" + selector, options);\n\n  if (selector !== \"\") {\n    throw new Error(\"Unmatched selector: \" + selector);\n  }\n\n  return subselects;\n}\n\nfunction parseSelector(subselects, selector, options) {\n  var _a, _b;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tokens = [];\n  var sawWS = false;\n\n  function getName() {\n    var match = selector.match(reName);\n\n    if (!match) {\n      throw new Error(\"Expected name, found \" + selector);\n    }\n\n    var sub = match[0];\n    selector = selector.substr(sub.length);\n    return unescapeCSS(sub);\n  }\n\n  function stripWhitespace(start) {\n    while (isWhitespace(selector.charAt(start))) start++;\n\n    selector = selector.substr(start);\n  }\n\n  function isEscaped(pos) {\n    var slashCount = 0;\n\n    while (selector.charAt(--pos) === \"\\\\\") slashCount++;\n\n    return (slashCount & 1) === 1;\n  }\n\n  stripWhitespace(0);\n\n  while (selector !== \"\") {\n    var firstChar = selector.charAt(0);\n\n    if (isWhitespace(firstChar)) {\n      sawWS = true;\n      stripWhitespace(1);\n    } else if (firstChar in Traversals) {\n      tokens.push({\n        type: Traversals[firstChar]\n      });\n      sawWS = false;\n      stripWhitespace(1);\n    } else if (firstChar === \",\") {\n      if (tokens.length === 0) {\n        throw new Error(\"Empty sub-selector\");\n      }\n\n      subselects.push(tokens);\n      tokens = [];\n      sawWS = false;\n      stripWhitespace(1);\n    } else {\n      if (sawWS) {\n        if (tokens.length > 0) {\n          tokens.push({\n            type: \"descendant\"\n          });\n        }\n\n        sawWS = false;\n      }\n\n      if (firstChar === \"*\") {\n        selector = selector.substr(1);\n        tokens.push({\n          type: \"universal\"\n        });\n      } else if (firstChar in attribSelectors) {\n        var _c = attribSelectors[firstChar],\n            name_1 = _c[0],\n            action = _c[1];\n        selector = selector.substr(1);\n        tokens.push({\n          type: \"attribute\",\n          name: name_1,\n          action: action,\n          value: getName(),\n          ignoreCase: false\n        });\n      } else if (firstChar === \"[\") {\n        selector = selector.substr(1);\n        var attributeMatch = selector.match(reAttr);\n\n        if (!attributeMatch) {\n          throw new Error(\"Malformed attribute selector: \" + selector);\n        }\n\n        var completeSelector = attributeMatch[0],\n            baseName = attributeMatch[1],\n            actionType = attributeMatch[2],\n            _d = attributeMatch[4],\n            quotedValue = _d === void 0 ? \"\" : _d,\n            _e = attributeMatch[5],\n            value = _e === void 0 ? quotedValue : _e,\n            ignoreCase = attributeMatch[6];\n        selector = selector.substr(completeSelector.length);\n        var name_2 = unescapeCSS(baseName);\n\n        if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {\n          name_2 = name_2.toLowerCase();\n        }\n\n        tokens.push({\n          type: \"attribute\",\n          name: name_2,\n          action: actionTypes[actionType],\n          value: unescapeCSS(value),\n          ignoreCase: !!ignoreCase\n        });\n      } else if (firstChar === \":\") {\n        if (selector.charAt(1) === \":\") {\n          selector = selector.substr(2);\n          tokens.push({\n            type: \"pseudo-element\",\n            name: getName().toLowerCase()\n          });\n          continue;\n        }\n\n        selector = selector.substr(1);\n        var name_3 = getName().toLowerCase();\n        var data = null;\n\n        if (selector.startsWith(\"(\")) {\n          if (unpackPseudos.has(name_3)) {\n            var quot = selector.charAt(1);\n            var quoted = quotes.has(quot);\n            selector = selector.substr(quoted ? 2 : 1);\n            data = [];\n            selector = parseSelector(data, selector, options);\n\n            if (quoted) {\n              if (!selector.startsWith(quot)) {\n                throw new Error(\"Unmatched quotes in :\" + name_3);\n              } else {\n                selector = selector.substr(1);\n              }\n            }\n\n            if (!selector.startsWith(\")\")) {\n              throw new Error(\"Missing closing parenthesis in :\" + name_3 + \" (\" + selector + \")\");\n            }\n\n            selector = selector.substr(1);\n          } else {\n            var pos = 1;\n            var counter = 1;\n\n            for (; counter > 0 && pos < selector.length; pos++) {\n              if (selector.charAt(pos) === \"(\" && !isEscaped(pos)) {\n                counter++;\n              } else if (selector.charAt(pos) === \")\" && !isEscaped(pos)) {\n                counter--;\n              }\n            }\n\n            if (counter) {\n              throw new Error(\"Parenthesis not matched\");\n            }\n\n            data = selector.substr(1, pos - 2);\n            selector = selector.substr(pos);\n\n            if (stripQuotesFromPseudos.has(name_3)) {\n              var quot = data.charAt(0);\n\n              if (quot === data.slice(-1) && quotes.has(quot)) {\n                data = data.slice(1, -1);\n              }\n\n              data = unescapeCSS(data);\n            }\n          }\n        }\n\n        tokens.push({\n          type: \"pseudo\",\n          name: name_3,\n          data: data\n        });\n      } else if (reName.test(selector)) {\n        var name_4 = getName();\n\n        if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {\n          name_4 = name_4.toLowerCase();\n        }\n\n        tokens.push({\n          type: \"tag\",\n          name: name_4\n        });\n      } else {\n        if (tokens.length && tokens[tokens.length - 1].type === \"descendant\") {\n          tokens.pop();\n        }\n\n        addToken(subselects, tokens);\n        return selector;\n      }\n    }\n  }\n\n  addToken(subselects, tokens);\n  return selector;\n}\n\nfunction addToken(subselects, tokens) {\n  if (subselects.length > 0 && tokens.length === 0) {\n    throw new Error(\"Empty sub-selector\");\n  }\n\n  subselects.push(tokens);\n}","map":null,"metadata":{},"sourceType":"script"}