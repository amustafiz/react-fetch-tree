{"version":3,"file":"injectScript.js","sources":["webpack://reactfetchtree/./injectScript.js"],"sourcesContent":["console.log(\"<----- Injected script started running ----->\");\n//declare object to be consumed by fiberwalker\nlet componentObj;\n\n//send message to client side notifying that inject script has been initialized\nwindow.postMessage(\n  { type: \"message\", payload: \"InjectScriptInitialized\" },\n  \"*\"\n);\n\n//set up listener for messages coming from client side\nwindow.addEventListener(\n  \"message\",\n  function (event) {\n    console.log(\"event received in injectScript\", event.data);\n    // only accept messages from the current tab\n    if (event.source != window) return;\n\n    //receiving essential info from page\n    if (\n      event.data.type &&\n      event.data.type == \"FROM_PAGE\" &&\n      typeof chrome.app.isInstalled !== \"undefined\"\n    ) {\n      chrome.runtime.sendMessage({ essential: event.data.essential });\n    }\n\n    //conditional check to see if componentObj has been received from client side FetchTreeHook\n    if (event.data.type && event.data.type === \"componentObj\") {\n      console.log(\"componentObj received in injectScript\", event.data);\n      componentObj = event.data.payload;\n    }\n  },\n  false\n);\n\n//is this necessary?\nfunction parseEssentialDetails() {\n  let main = {};\n\n  main.performance = JSON.parse(JSON.stringify(window.performance)) || null;\n\n  return main;\n}\n\n//fiberwalker function\nconst fiberwalker = (\n  node,\n  componentStore,\n  treedata = { name: \"Fiber Root\", children: [] }\n) => {\n  const dataReqArr = [\n    \"fetch\",\n    \"axios\",\n    \"http\",\n    \"https\",\n    \"qwest\",\n    \"superagent\",\n    \"XMLHttpRequest\",\n  ];\n\n  function Node(name) {\n    this.name = name;\n    this.children = [];\n  }\n\n  if (!node) return;\n\n  while (node) {\n    let name;\n    if (typeof node.elementType == \"string\") {\n      name = node.elementType;\n    } else if (node.elementType.name) {\n      name = node.elementType.name;\n    } else {\n      name = \"anon.\";\n    }\n    const currentNode = { name, children: [] };\n    if (componentStore !== undefined) {\n      if (componentStore[name]) {\n        //iterate through every entry and check request type\n        const dataRequest = componentStore[name];\n        for (let key in dataRequest) {\n          if (dataReqArr.includes(dataRequest[key].reqType)) {\n            currentNode.attributes = {\n              containsFetch: `${dataRequest[key].reqType}`,\n            };\n          }\n        }\n      }\n    }\n    treedata.children.push(currentNode);\n\n    if (node.child) {\n      fiberwalker(\n        node.child,\n        componentStore,\n        treedata.children[treedata.children.length - 1]\n      );\n    }\n\n    node = node.sibling;\n  }\n  return treedata;\n};\n\n//declaring variables needed for onCommitFiberRoot function\nlet __ReactFiberDOM;\nconst devTools = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\nlet orgChart = { name: \"Component\", children: [\"div\"] };\n\ndevTools.onCommitFiberRoot = (function (original) {\n  return function (...args) {\n    __ReactFiberDOM = args[1];\n    //console.log(\"dom: \", __ReactFiberDOM.current);\n    //console.log(\"componentObj in onCommitFiberRoot\", componentObj);\n    //orgChart = fiberwalker(__ReactFiberDOM.current, componentObj);\n    console.log(\"orgChart: \", orgChart);\n    window.postMessage({\n      type: \"orgChart\",\n      payload: orgChart,\n    });\n    return original(...args);\n  };\n})(devTools.onCommitFiberRoot);\n\n//is this necessary?\nsetInterval(() => {\n  let essential = parseEssentialDetails();\n  window.postMessage({ type: \"FROM_PAGE\", essential });\n}, 10000000);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AADA;AAAA;AAAA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;A","sourceRoot":""}