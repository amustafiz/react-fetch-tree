<<<<<<< HEAD
{"version":3,"file":"contentScript.js","sources":["webpack://reactfetchtree/./contentScript.js"],"sourcesContent":["console.log(\"<----- Content script started running ----->\");\n\n//declare function used to injectScript to dom\nfunction injectScript(file_path, tag) {\n  const node = document.getElementsByTagName(tag)[0];\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"type\", \"text/javascript\");\n  script.setAttribute(\"src\", file_path);\n  node.appendChild(script);\n}\n\n//call function with injectScript.js as argument\ninjectScript(chrome.runtime.getURL(\"injectScript.js\"), \"body\");\n\n//set up port for communication between background.js and contentscript\nconst port = chrome.runtime.connect(\"ohalcbgpbdnbaejhiaemlhdpjlidkjom\", {\n  name: \"contentScript\",\n});\nport.postMessage({\n  name: \"contentScript test\",\n  payload: \"this is coming from contentScript\",\n});\n\n//send message to client side notifying that content script has been initialized\nwindow.postMessage(\n  { type: \"message\", payload: \"ContentScriptInitialized\" },\n  \"*\"\n);\n\n//set up listener for messages coming from client side\nwindow.addEventListener(\n  \"message\",\n  function (event) {\n    console.log(\"event received in contentScript\", event.data);\n    // only accept messages from the current tab\n    if (event.source != window) return;\n\n    //receiving essential info from page\n    if (\n      event.data.type &&\n      event.data.type == \"FROM_PAGE\" &&\n      typeof chrome.app.isInstalled !== \"undefined\"\n    ) {\n      chrome.runtime.sendMessage({ essential: event.data.essential });\n    }\n    if (event.data.type && event.data.type === \"orgChart\") {\n      port.postMessage({\n        name: \"orgChart\",\n        payload: event.data.payload,\n      });\n    }\n  },\n  //check to see why this is set to false\n  false\n);\n"],"mappings":";;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;A","sourceRoot":""}
=======
{"version":3,"file":"contentScript.js","sources":["webpack://reactfetchtree/./contentScript.js"],"sourcesContent":["console.log(\"<----- Content script started running ----->\");\n\n//declare function used to injectScript to dom\nfunction injectScript(file_path, tag) {\n  const node = document.getElementsByTagName(tag)[0];\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"type\", \"text/javascript\");\n  script.setAttribute(\"src\", file_path);\n  node.appendChild(script);\n}\n\n//call function with injectScript.js as argument\ninjectScript(chrome.runtime.getURL(\"injectScript.js\"), \"body\");\n\n//set up port for communication between background.js and contentscript\nconst port = chrome.runtime.connect(\"clpdflcelpcimgnoilbniccopcnnheni\", {\n  name: \"contentScript\",\n});\nport.postMessage({\n  name: \"contentScript test\",\n  payload: \"this is coming from contentScript\",\n});\n\n//send message to client side notifying that content script has been initialized\nwindow.postMessage(\n  { type: \"message\", payload: \"ContentScriptInitialized\" },\n  \"*\"\n);\n\n//set up listener for messages coming from client side\nwindow.addEventListener(\n  \"message\",\n  function (event) {\n    console.log(\"event received in contentScript\", event.data);\n    // only accept messages from the current tab\n    if (event.source != window) return;\n\n    //receiving essential info from page\n    if (\n      event.data.type &&\n      event.data.type == \"FROM_PAGE\" &&\n      typeof chrome.app.isInstalled !== \"undefined\"\n    ) {\n      chrome.runtime.sendMessage({ essential: event.data.essential });\n    }\n    if (event.data.type && event.data.type === \"orgChart\") {\n      port.postMessage({\n        name: \"orgChart\",\n        payload: event.data.payload,\n      });\n    }\n  },\n  //check to see why this is set to false\n  false\n);\n"],"mappings":";;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;A","sourceRoot":""}
>>>>>>> b35a85831e74bac9fe872089897b38140bc54697
